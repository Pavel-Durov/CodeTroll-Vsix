//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeTroll {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CodeTroll.Resources", typeof(Resources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please consider renaming your chosen name.
        /// </summary>
        internal static string CornyClassNamingConventionContent {
            get {
                return ResourceManager.GetString("CornyClassNamingConventionContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your class &apos;{0}&apos; has a Corny name.
        /// </summary>
        internal static string CornyClassNamingConventionMessageformat {
            get {
                return ResourceManager.GetString("CornyClassNamingConventionMessageformat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Corny name Alert!.
        /// </summary>
        internal static string CornyClassNamingConventionTitle {
            get {
                return ResourceManager.GetString("CornyClassNamingConventionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit suffix.
        /// </summary>
        internal static string InterfaceExplicitNamingConventionCodeFixTitle {
            get {
                return ResourceManager.GetString("InterfaceExplicitNamingConventionCodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit suffix to your interface declaration name.
        /// </summary>
        internal static string InterfaceExplicitNamingConventionContent {
            get {
                return ResourceManager.GetString("InterfaceExplicitNamingConventionContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit Interface naming convention is mandatory.
        /// </summary>
        internal static string InterfaceExplicitNamingConventionMessageFormat {
            get {
                return ResourceManager.GetString("InterfaceExplicitNamingConventionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface Naming Convention.
        /// </summary>
        internal static string InterfaceExplicitNamingConventionTitle {
            get {
                return ResourceManager.GetString("InterfaceExplicitNamingConventionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface naming convention.
        /// </summary>
        internal static string InterfaceNamingConventionCodeFixTitle {
            get {
                return ResourceManager.GetString("InterfaceNamingConventionCodeFixTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface should start with &apos;I&apos; char.
        /// </summary>
        internal static string InterfaceNamingConventionContent {
            get {
                return ResourceManager.GetString("InterfaceNamingConventionContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface name should start with &apos;I&apos; char.
        /// </summary>
        internal static string InterfaceNamingConventionMessageFormat {
            get {
                return ResourceManager.GetString("InterfaceNamingConventionMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Naming convention for interface declaration.
        /// </summary>
        internal static string InterfaceNamingConventionTitle {
            get {
                return ResourceManager.GetString("InterfaceNamingConventionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Naming your variables with this name is confusing and causes headaches from time to time.
        /// </summary>
        internal static string LowerCaseMemberNameStartContent {
            get {
                return ResourceManager.GetString("LowerCaseMemberNameStartContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please consider renaming it  to something more appropriate.
        /// </summary>
        internal static string LowerCaseMemberNameStartMessageFormat {
            get {
                return ResourceManager.GetString("LowerCaseMemberNameStartMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your member name starts with lowercase.
        /// </summary>
        internal static string LowerCaseMemberNameStartNameTitle {
            get {
                return ResourceManager.GetString("LowerCaseMemberNameStartNameTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Seal your locals.
        /// </summary>
        internal static string SealYourLocalMembers {
            get {
                return ResourceManager.GetString("SealYourLocalMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string String1 {
            get {
                return ResourceManager.GetString("String1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sorry, you cannot just use uppercase like that. This is embarrassing!.
        /// </summary>
        internal static string UppercaseContent {
            get {
                return ResourceManager.GetString("UppercaseContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declaring events with uppercase is redundant.
        /// </summary>
        internal static string UppercaseEventNameContent {
            get {
                return ResourceManager.GetString("UppercaseEventNameContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You&apos;ve declared an event with an uppercase, you playing it dirty….
        /// </summary>
        internal static string UppercaseEventNameMessageFormat {
            get {
                return ResourceManager.GetString("UppercaseEventNameMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Events naming convetion.
        /// </summary>
        internal static string UppercaseEventNameTitle {
            get {
                return ResourceManager.GetString("UppercaseEventNameTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your calss contains members with names starting with uppercase .
        /// </summary>
        internal static string UppercaselTitle {
            get {
                return ResourceManager.GetString("UppercaselTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; class contains a member which has a name with uppercase at its beginning.
        /// </summary>
        internal static string UppercaseMessageFormat {
            get {
                return ResourceManager.GetString("UppercaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether or not you explicitly declare a namespace in a C# source file, the compiler adds a default namespace. This unnamed namespace, sometimes referred to as the global namespace, is present in every file. Any identifier in the global namespace is available for use in a named namespace.
        ///Namespaces implicitly have public access and this is not modifiable. For a discussion of the access modifiers you can assign to elements in a namespace, see Access Modifiers (C# Reference).
        ///It is possible to define a name [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string UsingNamespaceContent {
            get {
                return ResourceManager.GetString("UsingNamespaceContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Did you know?.
        /// </summary>
        internal static string UsingNamespaceMessageTitle {
            get {
                return ResourceManager.GetString("UsingNamespaceMessageTitle", resourceCulture);
            }
        }
    }
}
